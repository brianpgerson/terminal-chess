c
cc
c
get_king(:white).color
get_king(:white)
s
opponent_color
n
color
s
n
self.color
n
s
new_pos
s
n
s
c
almost_valid
n
possible_moves
n
s
new_pos
moves
s
c
s
    @curr_player.display.render
    @curr_player.highlight_poss(almost_valid)
n
almost_valid
    @curr_player.highlight_poss(almost_valid)
c
    @curr_player.display.render
    @curr_player.highlight_poss(almost_valid)
    @curr_player.highlight_poss(moves)
almost_valid
n
c
almost_valid
n
c
cc
c
q
selected_piece.class == Pawn
selected_piece.class
selected_piece
selected_piece.class == pawn
=> 75:           selected_piece.position[0] == 6selected_piece.class == pawn
   74:           selected_piece.position[0] == 1 ||
selected_piece.class == pawn &&
c
cc
c
q
c
all_moves
self.position
self
pos
@board[pos].color != @color
!@board[pos].color.nil?
c
cc
c
cc
c
n
c
piece.position
n
piece.position
n
c
piece.position
n
piece.position
n
c
piece.position
n
piece.position
n
c
piece.position
n
almost_valid
n
piece.position
piece
n
@board[@pos].position
@board[@pos].class.position
@board[@pos].class
@board[@pos]
@pos
q
piece.position
piece
q
selected_piece.position
selected_piece.class
selected_piece
new_pos
c
selected_piece.position
new_pos
c
q
c
cc
c
cc
c
q
c
direction[0]
n
s
directional_moves
@board[next_pos].color.nil?
next_pos
self.position
self.directions
self.class
direction
next_pos
c
next_pos
c
next_pos
c
next_pos
c
next_pos
c
next_pos
c
next_pos
c
n
c
q
c
@board[next_pos].color.nil?
self.class
c
self.class
c
self.class
c
self.class
c
@board[next_pos].color != self.color
@board[next_pos].color.nil?
self.class
c
@board[next_pos].color != self.color
@board[next_pos].color.nil?
self.class
c
next_pos
c
self.class
@board[next_pos].color.nil?
@board[next_pos]
next_pos
c
q
c
next_pos
c
next_pos
c
next_pos
c
next_pos
s
c
s
pos
step
setp
c
cc
c
q
@board.in_bounds?(next_pos)
@board[next_pos].color.nil?
@board.in_bounds?(next_pos)
next_pos
@board[next_pos[0], next_pos[1]]
@board[next_pos[0]]
@board[next_pos]
next_pos
@board
next_pos
@board[next_pos]
next_pos
s
next_pos
@board[next_pos]
[current_x + step[0], current_y + step[1]]
current_x
n
s
move_deltas
self.class
c
self.class
@position
n
s
collect_moves(direction)
direction
s
directions
c
piece.class
piece.moves
piece
s
    all_pieces_of_a_color(opponent_color).each { |piece| all_moves += piece.moves }
all_moves 
all_pieces_of_a_color(:black)
opponent_color
all_pieces_of_a_color
s
color
s
n
new_pos
@position
n
s
new_pos
n
s
moves
s
self[new_pos]
new_pos
self
c
@board[all_moves[:standard_move]].colorless?
@board[all_moves[:standard_move]]
q
@board[all_moves[standard[Dqyq
q
all_moves
@board[all_moves[:standard_move][0]][all_moves[:standard_move][1]].colorless?
q
moves
